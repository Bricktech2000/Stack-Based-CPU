instruction_opcode:
  00:



00 xxxxxx: normal, operating on stack
11 bb xxxx: normal, with 4-bit argument
10 xxxxxx: load from offset
01 xxxxxx: store to offset


11 bb             xxxx

11 shift          right/left 3-bit-value
11 shiftc         right/left 3-bit-value
11 shifta         right/left 3-bit-value
11 load-immediate 4-bit value





instruction_opcode:
  0 0 :
      00 : nop : no operation
      01 : x00 : load 8-bit immediate
      02 : htl : halt

      11 : lda : load value from memory address to stack
      12 : sta : store value to memory address from stack
      13 : ldp : load stack pointer to stack
      14 : stp : store stack pointer from stack
      15 : ldi : load instruction pointer to stack
      16 : sti : store instruction pointer from stack
      17 : ldc : load carry flag to stack
      18 : stc : store carry flag from stack
      19 : dup : duplicate value on stack
      1A : drp : drop value from stack
-     1B : swp : swap two values on stack

      20 : add : addition
      21 : adc : addition with carry
      22 : sub : subtraction
      23 : sbc : subtraction with borrow
      24 : inc : increment
      25 : dec : decrement
-     26 : ilt : is less than
-     27 : igt : is greater than
-     28 : ieq : is equal
-     29 : nez : is not equal to zero

      30 : not : bitwise not
      31 : oor : bitwise or
      32 : and : bitwise and
      33 : xor : bitwise xor
  0 1 : sto : store to offset from stack pointer
  1 0 : ldo : load from offset from stack pointer
  1 1 :
      0 1 : shift
          0 : shl : shift left with 3-bit-value
          1 : shr : shift right with 3-bit-value
      1 0 : shift with carry
          0 : slc : carry shift left with 3-bit-value
          1 : src : carry shift right with 3-bit-value
      0 0 : arithmetic shift
          0 : sla : arithmetic shift left with 3-bit-value
          1 : sra : arithmetic shift right with 3-bit-value
      1 1 : load 4-bit immediate to stack



other (not implemented yet):
  signed / unsigned?
  jumps / compares?
  syscalls / interrupts?
  timer?
  neg : negate
  abs : absolute value

program:
  instruction*

instruction:
  0 0 E E E E E E |
  0 1 V V V V V V |
  1 0 V V V V V V |
  1 1 E E V V V V
where
  E : opcode
  V : operand

true:
  1 1 1 1 1 1 1 1

false:
  0 0 0 0 0 0 0 0























